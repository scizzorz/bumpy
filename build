#!/usr/bin/env python
import sys
from building import task, requires, age, require, shell, abort, main

# no requirements
@task
def clean():
	'''Cleans the project.'''
	shell("rm", "exe")
	print 'cleaning...'

# File requirement
@task
@requires("src")
def compile():
	'''Compiles the project.'''
	if age("src") < age("exe"):
		shell("touch", "exe")
		print 'compiling...'

# task requirement
# also note the order independence!
@requires(compile)
@task
def run():
	'''Runs the project.'''
	print 'run()'

# also note that @requires(...) and @task are redundant.
@requires(run)
def stop():
	'''Stops the project.'''
	require(run)
	print 'stop()'


# inner requirement
# might be useful when a task has yet to be defined,
# although it prevents the requirements from showing
# up in the help messages
@task
def bad():
	'''A bad task.'''
	require(aborter)
	print 'bad()'

# aborting tasks upon failure
@task
def aborter():
	'''Raises an AbortException to fail the build.'''
	abort("aborting...")
	print 'abort()'

if __name__ == '__main__':
	main(sys.argv[1:])
